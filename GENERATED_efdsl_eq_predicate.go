package sameriver

/*
Heed this warning. Do not edit this file by hand; instead use sameriver-efdsl-gen. And yes, it is horrifying. Blame Rob Pike! My revenge is allowing overloading of predicate/sort func signatures.
*/

"%s": e.Predicate(,
	"int, int",
	func(a, b int) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"int, IdentResolve<int>",
	func(a, b int) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"IdentResolve<int>, int",
	func(a, b int) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"IdentResolve<int>, IdentResolve<int>",
	func(a, b int) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"float64, float64",
	func(a, b float64) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"float64, IdentResolve<float64>",
	func(a, b float64) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"IdentResolve<float64>, float64",
	func(a, b float64) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"IdentResolve<float64>, IdentResolve<float64>",
	func(a, b float64) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"bool, bool",
	func(a, b bool) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"bool, IdentResolve<bool>",
	func(a, b bool) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"IdentResolve<bool>, bool",
	func(a, b bool) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"IdentResolve<bool>, IdentResolve<bool>",
	func(a, b bool) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"string, string",
	func(a, b string) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"string, IdentResolve<string>",
	func(a, b string) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"IdentResolve<string>, string",
	func(a, b string) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"IdentResolve<string>, IdentResolve<string>",
	func(a, b string) func(*Entity) bool {
		return func(x *Entity) bool {
			return a == b
		}
	},
	"*any, *any",
	func(a, b *any) func(*Entity) bool {
		return func(x *Entity) bool {
			aPtr := reflect.ValueOf(a).Pointer()
			bPtr := reflect.ValueOf(b).Pointer()
			return aPtr == bPtr
		}
	},
	"*any, IdentResolve<*any>",
	func(a, b *any) func(*Entity) bool {
		return func(x *Entity) bool {
			aPtr := reflect.ValueOf(a).Pointer()
			bPtr := reflect.ValueOf(b).Pointer()
			return aPtr == bPtr
		}
	},
	"IdentResolve<*any>, *any",
	func(a, b *any) func(*Entity) bool {
		return func(x *Entity) bool {
			aPtr := reflect.ValueOf(a).Pointer()
			bPtr := reflect.ValueOf(b).Pointer()
			return aPtr == bPtr
		}
	},
	"IdentResolve<*any>, IdentResolve<*any>",
	func(a, b *any) func(*Entity) bool {
		return func(x *Entity) bool {
			aPtr := reflect.ValueOf(a).Pointer()
			bPtr := reflect.ValueOf(b).Pointer()
			return aPtr == bPtr
		}
	},
)