package sameriver

/*
Heed this warning. Do not edit this file by hand; instead use sameriver-efdsl-gen. And yes, it is horrifying. Blame Rob Pike! My revenge is allowing overloading of predicate/sort func signatures.
*/

func (e *EFDSLEvaluator) predicateSignatureAssertSwitch(f any, argsTyped []any) func(*Entity) bool {
	var result func(*Entity) bool
	switch fTyped := f.(type) {
	case func(bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool))
	case func(int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int))
	case func(float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64))
	case func(string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string))
	case func([]string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string))
	case func(Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D))
	case func([]Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D))
	case func(bool, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool))
	case func(int, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool))
	case func(float64, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool))
	case func(string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool))
	case func([]string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool))
	case func(Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool))
	case func([]Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool))
	case func(bool, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int))
	case func(int, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int))
	case func(float64, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int))
	case func(string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int))
	case func([]string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int))
	case func(Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int))
	case func([]Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int))
	case func(bool, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64))
	case func(int, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64))
	case func(float64, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64))
	case func(string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64))
	case func([]string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64))
	case func(Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64))
	case func([]Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64))
	case func(bool, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string))
	case func(int, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string))
	case func(float64, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string))
	case func(string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string))
	case func([]string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string))
	case func(Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string))
	case func([]Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string))
	case func(bool, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string))
	case func(int, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string))
	case func(float64, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string))
	case func(string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string))
	case func([]string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string))
	case func(Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string))
	case func([]Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string))
	case func(bool, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D))
	case func(int, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D))
	case func(float64, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D))
	case func(string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D))
	case func([]string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D))
	case func(Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D))
	case func([]Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D))
	case func(bool, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D))
	case func(int, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D))
	case func(float64, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D))
	case func(string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D))
	case func([]string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D))
	case func(Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D))
	case func([]Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D))
	case func(bool, bool, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].(bool))
	case func(int, bool, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].(bool))
	case func(float64, bool, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].(bool))
	case func(string, bool, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].(bool))
	case func([]string, bool, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].(bool))
	case func(Vec2D, bool, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].(bool))
	case func([]Vec2D, bool, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].(bool))
	case func(bool, int, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].(bool))
	case func(int, int, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].(bool))
	case func(float64, int, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].(bool))
	case func(string, int, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].(bool))
	case func([]string, int, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].(bool))
	case func(Vec2D, int, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].(bool))
	case func([]Vec2D, int, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].(bool))
	case func(bool, float64, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].(bool))
	case func(int, float64, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].(bool))
	case func(float64, float64, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].(bool))
	case func(string, float64, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].(bool))
	case func([]string, float64, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].(bool))
	case func(Vec2D, float64, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].(bool))
	case func([]Vec2D, float64, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].(bool))
	case func(bool, string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].(bool))
	case func(int, string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].(bool))
	case func(float64, string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].(bool))
	case func(string, string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].(bool))
	case func([]string, string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].(bool))
	case func(Vec2D, string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].(bool))
	case func([]Vec2D, string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].(bool))
	case func(bool, []string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].(bool))
	case func(int, []string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].(bool))
	case func(float64, []string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].(bool))
	case func(string, []string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].(bool))
	case func([]string, []string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].(bool))
	case func(Vec2D, []string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].(bool))
	case func([]Vec2D, []string, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].(bool))
	case func(bool, Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func(int, Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func(float64, Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func(string, Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func([]string, Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func(Vec2D, Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func([]Vec2D, Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func(bool, []Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func(int, []Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func(float64, []Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func(string, []Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func([]string, []Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func(Vec2D, []Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func([]Vec2D, []Vec2D, bool) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func(bool, bool, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].(int))
	case func(int, bool, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].(int))
	case func(float64, bool, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].(int))
	case func(string, bool, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].(int))
	case func([]string, bool, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].(int))
	case func(Vec2D, bool, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].(int))
	case func([]Vec2D, bool, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].(int))
	case func(bool, int, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].(int))
	case func(int, int, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].(int))
	case func(float64, int, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].(int))
	case func(string, int, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].(int))
	case func([]string, int, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].(int))
	case func(Vec2D, int, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].(int))
	case func([]Vec2D, int, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].(int))
	case func(bool, float64, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].(int))
	case func(int, float64, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].(int))
	case func(float64, float64, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].(int))
	case func(string, float64, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].(int))
	case func([]string, float64, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].(int))
	case func(Vec2D, float64, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].(int))
	case func([]Vec2D, float64, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].(int))
	case func(bool, string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].(int))
	case func(int, string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].(int))
	case func(float64, string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].(int))
	case func(string, string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].(int))
	case func([]string, string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].(int))
	case func(Vec2D, string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].(int))
	case func([]Vec2D, string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].(int))
	case func(bool, []string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].(int))
	case func(int, []string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].(int))
	case func(float64, []string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].(int))
	case func(string, []string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].(int))
	case func([]string, []string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].(int))
	case func(Vec2D, []string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].(int))
	case func([]Vec2D, []string, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].(int))
	case func(bool, Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func(int, Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func(float64, Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func(string, Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func([]string, Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func(Vec2D, Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func([]Vec2D, Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func(bool, []Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func(int, []Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func(float64, []Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func(string, []Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func([]string, []Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func(Vec2D, []Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func([]Vec2D, []Vec2D, int) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func(bool, bool, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].(float64))
	case func(int, bool, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].(float64))
	case func(float64, bool, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].(float64))
	case func(string, bool, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].(float64))
	case func([]string, bool, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].(float64))
	case func(Vec2D, bool, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].(float64))
	case func([]Vec2D, bool, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].(float64))
	case func(bool, int, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].(float64))
	case func(int, int, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].(float64))
	case func(float64, int, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].(float64))
	case func(string, int, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].(float64))
	case func([]string, int, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].(float64))
	case func(Vec2D, int, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].(float64))
	case func([]Vec2D, int, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].(float64))
	case func(bool, float64, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].(float64))
	case func(int, float64, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].(float64))
	case func(float64, float64, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].(float64))
	case func(string, float64, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].(float64))
	case func([]string, float64, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].(float64))
	case func(Vec2D, float64, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].(float64))
	case func([]Vec2D, float64, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].(float64))
	case func(bool, string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].(float64))
	case func(int, string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].(float64))
	case func(float64, string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].(float64))
	case func(string, string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].(float64))
	case func([]string, string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].(float64))
	case func(Vec2D, string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].(float64))
	case func([]Vec2D, string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].(float64))
	case func(bool, []string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].(float64))
	case func(int, []string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].(float64))
	case func(float64, []string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].(float64))
	case func(string, []string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].(float64))
	case func([]string, []string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].(float64))
	case func(Vec2D, []string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].(float64))
	case func([]Vec2D, []string, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].(float64))
	case func(bool, Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func(int, Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func(float64, Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func(string, Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func([]string, Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func(Vec2D, Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func([]Vec2D, Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func(bool, []Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func(int, []Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func(float64, []Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func(string, []Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func([]string, []Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func(Vec2D, []Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func([]Vec2D, []Vec2D, float64) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func(bool, bool, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].(string))
	case func(int, bool, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].(string))
	case func(float64, bool, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].(string))
	case func(string, bool, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].(string))
	case func([]string, bool, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].(string))
	case func(Vec2D, bool, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].(string))
	case func([]Vec2D, bool, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].(string))
	case func(bool, int, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].(string))
	case func(int, int, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].(string))
	case func(float64, int, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].(string))
	case func(string, int, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].(string))
	case func([]string, int, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].(string))
	case func(Vec2D, int, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].(string))
	case func([]Vec2D, int, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].(string))
	case func(bool, float64, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].(string))
	case func(int, float64, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].(string))
	case func(float64, float64, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].(string))
	case func(string, float64, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].(string))
	case func([]string, float64, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].(string))
	case func(Vec2D, float64, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].(string))
	case func([]Vec2D, float64, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].(string))
	case func(bool, string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].(string))
	case func(int, string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].(string))
	case func(float64, string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].(string))
	case func(string, string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].(string))
	case func([]string, string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].(string))
	case func(Vec2D, string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].(string))
	case func([]Vec2D, string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].(string))
	case func(bool, []string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].(string))
	case func(int, []string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].(string))
	case func(float64, []string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].(string))
	case func(string, []string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].(string))
	case func([]string, []string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].(string))
	case func(Vec2D, []string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].(string))
	case func([]Vec2D, []string, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].(string))
	case func(bool, Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func(int, Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func(float64, Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func(string, Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func([]string, Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func(Vec2D, Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func([]Vec2D, Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func(bool, []Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func(int, []Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func(float64, []Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func(string, []Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func([]string, []Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func(Vec2D, []Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func([]Vec2D, []Vec2D, string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func(bool, bool, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].([]string))
	case func(int, bool, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].([]string))
	case func(float64, bool, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].([]string))
	case func(string, bool, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].([]string))
	case func([]string, bool, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].([]string))
	case func(Vec2D, bool, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].([]string))
	case func([]Vec2D, bool, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].([]string))
	case func(bool, int, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].([]string))
	case func(int, int, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].([]string))
	case func(float64, int, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].([]string))
	case func(string, int, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].([]string))
	case func([]string, int, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].([]string))
	case func(Vec2D, int, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].([]string))
	case func([]Vec2D, int, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].([]string))
	case func(bool, float64, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].([]string))
	case func(int, float64, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].([]string))
	case func(float64, float64, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].([]string))
	case func(string, float64, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].([]string))
	case func([]string, float64, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].([]string))
	case func(Vec2D, float64, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].([]string))
	case func([]Vec2D, float64, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].([]string))
	case func(bool, string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].([]string))
	case func(int, string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].([]string))
	case func(float64, string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].([]string))
	case func(string, string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].([]string))
	case func([]string, string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].([]string))
	case func(Vec2D, string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].([]string))
	case func([]Vec2D, string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].([]string))
	case func(bool, []string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].([]string))
	case func(int, []string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].([]string))
	case func(float64, []string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].([]string))
	case func(string, []string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].([]string))
	case func([]string, []string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].([]string))
	case func(Vec2D, []string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].([]string))
	case func([]Vec2D, []string, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].([]string))
	case func(bool, Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func(int, Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func(float64, Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func(string, Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func([]string, Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func(Vec2D, Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func([]Vec2D, Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func(bool, []Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func(int, []Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func(float64, []Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func(string, []Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func([]string, []Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func(Vec2D, []Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func([]Vec2D, []Vec2D, []string) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func(bool, bool, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func(int, bool, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func(float64, bool, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func(string, bool, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func([]string, bool, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func(Vec2D, bool, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func([]Vec2D, bool, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func(bool, int, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func(int, int, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func(float64, int, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func(string, int, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func([]string, int, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func(Vec2D, int, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func([]Vec2D, int, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func(bool, float64, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func(int, float64, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func(float64, float64, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func(string, float64, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func([]string, float64, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func(Vec2D, float64, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func([]Vec2D, float64, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func(bool, string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func(int, string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func(float64, string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func(string, string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func([]string, string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func(Vec2D, string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func([]Vec2D, string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func(bool, []string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func(int, []string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func(float64, []string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func(string, []string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func([]string, []string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func(Vec2D, []string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func([]Vec2D, []string, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func(bool, Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func(int, Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func(float64, Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func(string, Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func([]string, Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func(Vec2D, Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func([]Vec2D, Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func(bool, []Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func(int, []Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func(float64, []Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func(string, []Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func([]string, []Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func(Vec2D, []Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func([]Vec2D, []Vec2D, Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func(bool, bool, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func(int, bool, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func(float64, bool, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func(string, bool, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func([]string, bool, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func(Vec2D, bool, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func([]Vec2D, bool, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func(bool, int, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func(int, int, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func(float64, int, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func(string, int, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func([]string, int, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func(Vec2D, int, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func([]Vec2D, int, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func(bool, float64, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func(int, float64, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func(float64, float64, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func(string, float64, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func([]string, float64, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func(Vec2D, float64, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func([]Vec2D, float64, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func(bool, string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func(int, string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func(float64, string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func(string, string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func([]string, string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func(Vec2D, string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func([]Vec2D, string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func(bool, []string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func(int, []string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func(float64, []string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func(string, []string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func([]string, []string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func(Vec2D, []string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func([]Vec2D, []string, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func(bool, Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func(int, Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func(float64, Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func(string, Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func([]string, Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func(Vec2D, Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func([]Vec2D, Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func(bool, []Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	case func(int, []Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	case func(float64, []Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	case func(string, []Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	case func([]string, []Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	case func(Vec2D, []Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	case func([]Vec2D, []Vec2D, []Vec2D) func(*Entity) bool:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	default:
		panic("No case in either engine or user-registered signatures for the given func. Use EFDSL.RegisterUserPredicateSignatureAsserter()")
	}

	return result
}

func (e *EFDSLEvaluator) sortSignatureAssertSwitch(f any, argsTyped []any) func(xs []*Entity) func(i, j int) int {
	var result func(xs []*Entity) func(i, j int) int
	switch fTyped := f.(type) {
	case func(bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool))
	case func(int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int))
	case func(float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64))
	case func(string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string))
	case func([]string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string))
	case func(Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D))
	case func([]Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D))
	case func(bool, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool))
	case func(int, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool))
	case func(float64, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool))
	case func(string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool))
	case func([]string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool))
	case func(Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool))
	case func([]Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool))
	case func(bool, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int))
	case func(int, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int))
	case func(float64, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int))
	case func(string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int))
	case func([]string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int))
	case func(Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int))
	case func([]Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int))
	case func(bool, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64))
	case func(int, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64))
	case func(float64, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64))
	case func(string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64))
	case func([]string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64))
	case func(Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64))
	case func([]Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64))
	case func(bool, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string))
	case func(int, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string))
	case func(float64, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string))
	case func(string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string))
	case func([]string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string))
	case func(Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string))
	case func([]Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string))
	case func(bool, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string))
	case func(int, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string))
	case func(float64, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string))
	case func(string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string))
	case func([]string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string))
	case func(Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string))
	case func([]Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string))
	case func(bool, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D))
	case func(int, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D))
	case func(float64, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D))
	case func(string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D))
	case func([]string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D))
	case func(Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D))
	case func([]Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D))
	case func(bool, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D))
	case func(int, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D))
	case func(float64, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D))
	case func(string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D))
	case func([]string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D))
	case func(Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D))
	case func([]Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D))
	case func(bool, bool, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].(bool))
	case func(int, bool, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].(bool))
	case func(float64, bool, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].(bool))
	case func(string, bool, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].(bool))
	case func([]string, bool, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].(bool))
	case func(Vec2D, bool, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].(bool))
	case func([]Vec2D, bool, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].(bool))
	case func(bool, int, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].(bool))
	case func(int, int, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].(bool))
	case func(float64, int, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].(bool))
	case func(string, int, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].(bool))
	case func([]string, int, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].(bool))
	case func(Vec2D, int, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].(bool))
	case func([]Vec2D, int, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].(bool))
	case func(bool, float64, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].(bool))
	case func(int, float64, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].(bool))
	case func(float64, float64, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].(bool))
	case func(string, float64, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].(bool))
	case func([]string, float64, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].(bool))
	case func(Vec2D, float64, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].(bool))
	case func([]Vec2D, float64, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].(bool))
	case func(bool, string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].(bool))
	case func(int, string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].(bool))
	case func(float64, string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].(bool))
	case func(string, string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].(bool))
	case func([]string, string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].(bool))
	case func(Vec2D, string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].(bool))
	case func([]Vec2D, string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].(bool))
	case func(bool, []string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].(bool))
	case func(int, []string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].(bool))
	case func(float64, []string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].(bool))
	case func(string, []string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].(bool))
	case func([]string, []string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].(bool))
	case func(Vec2D, []string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].(bool))
	case func([]Vec2D, []string, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].(bool))
	case func(bool, Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func(int, Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func(float64, Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func(string, Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func([]string, Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func(Vec2D, Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func([]Vec2D, Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(bool))
	case func(bool, []Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func(int, []Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func(float64, []Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func(string, []Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func([]string, []Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func(Vec2D, []Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func([]Vec2D, []Vec2D, bool) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(bool))
	case func(bool, bool, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].(int))
	case func(int, bool, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].(int))
	case func(float64, bool, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].(int))
	case func(string, bool, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].(int))
	case func([]string, bool, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].(int))
	case func(Vec2D, bool, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].(int))
	case func([]Vec2D, bool, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].(int))
	case func(bool, int, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].(int))
	case func(int, int, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].(int))
	case func(float64, int, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].(int))
	case func(string, int, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].(int))
	case func([]string, int, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].(int))
	case func(Vec2D, int, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].(int))
	case func([]Vec2D, int, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].(int))
	case func(bool, float64, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].(int))
	case func(int, float64, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].(int))
	case func(float64, float64, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].(int))
	case func(string, float64, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].(int))
	case func([]string, float64, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].(int))
	case func(Vec2D, float64, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].(int))
	case func([]Vec2D, float64, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].(int))
	case func(bool, string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].(int))
	case func(int, string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].(int))
	case func(float64, string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].(int))
	case func(string, string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].(int))
	case func([]string, string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].(int))
	case func(Vec2D, string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].(int))
	case func([]Vec2D, string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].(int))
	case func(bool, []string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].(int))
	case func(int, []string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].(int))
	case func(float64, []string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].(int))
	case func(string, []string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].(int))
	case func([]string, []string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].(int))
	case func(Vec2D, []string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].(int))
	case func([]Vec2D, []string, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].(int))
	case func(bool, Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func(int, Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func(float64, Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func(string, Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func([]string, Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func(Vec2D, Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func([]Vec2D, Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(int))
	case func(bool, []Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func(int, []Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func(float64, []Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func(string, []Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func([]string, []Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func(Vec2D, []Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func([]Vec2D, []Vec2D, int) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(int))
	case func(bool, bool, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].(float64))
	case func(int, bool, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].(float64))
	case func(float64, bool, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].(float64))
	case func(string, bool, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].(float64))
	case func([]string, bool, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].(float64))
	case func(Vec2D, bool, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].(float64))
	case func([]Vec2D, bool, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].(float64))
	case func(bool, int, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].(float64))
	case func(int, int, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].(float64))
	case func(float64, int, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].(float64))
	case func(string, int, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].(float64))
	case func([]string, int, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].(float64))
	case func(Vec2D, int, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].(float64))
	case func([]Vec2D, int, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].(float64))
	case func(bool, float64, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].(float64))
	case func(int, float64, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].(float64))
	case func(float64, float64, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].(float64))
	case func(string, float64, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].(float64))
	case func([]string, float64, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].(float64))
	case func(Vec2D, float64, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].(float64))
	case func([]Vec2D, float64, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].(float64))
	case func(bool, string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].(float64))
	case func(int, string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].(float64))
	case func(float64, string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].(float64))
	case func(string, string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].(float64))
	case func([]string, string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].(float64))
	case func(Vec2D, string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].(float64))
	case func([]Vec2D, string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].(float64))
	case func(bool, []string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].(float64))
	case func(int, []string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].(float64))
	case func(float64, []string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].(float64))
	case func(string, []string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].(float64))
	case func([]string, []string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].(float64))
	case func(Vec2D, []string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].(float64))
	case func([]Vec2D, []string, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].(float64))
	case func(bool, Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func(int, Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func(float64, Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func(string, Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func([]string, Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func(Vec2D, Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func([]Vec2D, Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(float64))
	case func(bool, []Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func(int, []Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func(float64, []Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func(string, []Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func([]string, []Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func(Vec2D, []Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func([]Vec2D, []Vec2D, float64) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(float64))
	case func(bool, bool, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].(string))
	case func(int, bool, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].(string))
	case func(float64, bool, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].(string))
	case func(string, bool, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].(string))
	case func([]string, bool, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].(string))
	case func(Vec2D, bool, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].(string))
	case func([]Vec2D, bool, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].(string))
	case func(bool, int, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].(string))
	case func(int, int, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].(string))
	case func(float64, int, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].(string))
	case func(string, int, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].(string))
	case func([]string, int, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].(string))
	case func(Vec2D, int, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].(string))
	case func([]Vec2D, int, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].(string))
	case func(bool, float64, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].(string))
	case func(int, float64, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].(string))
	case func(float64, float64, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].(string))
	case func(string, float64, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].(string))
	case func([]string, float64, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].(string))
	case func(Vec2D, float64, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].(string))
	case func([]Vec2D, float64, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].(string))
	case func(bool, string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].(string))
	case func(int, string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].(string))
	case func(float64, string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].(string))
	case func(string, string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].(string))
	case func([]string, string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].(string))
	case func(Vec2D, string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].(string))
	case func([]Vec2D, string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].(string))
	case func(bool, []string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].(string))
	case func(int, []string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].(string))
	case func(float64, []string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].(string))
	case func(string, []string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].(string))
	case func([]string, []string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].(string))
	case func(Vec2D, []string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].(string))
	case func([]Vec2D, []string, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].(string))
	case func(bool, Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func(int, Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func(float64, Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func(string, Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func([]string, Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func(Vec2D, Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func([]Vec2D, Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(string))
	case func(bool, []Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func(int, []Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func(float64, []Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func(string, []Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func([]string, []Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func(Vec2D, []Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func([]Vec2D, []Vec2D, string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(string))
	case func(bool, bool, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].([]string))
	case func(int, bool, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].([]string))
	case func(float64, bool, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].([]string))
	case func(string, bool, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].([]string))
	case func([]string, bool, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].([]string))
	case func(Vec2D, bool, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].([]string))
	case func([]Vec2D, bool, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].([]string))
	case func(bool, int, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].([]string))
	case func(int, int, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].([]string))
	case func(float64, int, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].([]string))
	case func(string, int, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].([]string))
	case func([]string, int, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].([]string))
	case func(Vec2D, int, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].([]string))
	case func([]Vec2D, int, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].([]string))
	case func(bool, float64, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].([]string))
	case func(int, float64, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].([]string))
	case func(float64, float64, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].([]string))
	case func(string, float64, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].([]string))
	case func([]string, float64, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].([]string))
	case func(Vec2D, float64, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].([]string))
	case func([]Vec2D, float64, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].([]string))
	case func(bool, string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].([]string))
	case func(int, string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].([]string))
	case func(float64, string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].([]string))
	case func(string, string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].([]string))
	case func([]string, string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].([]string))
	case func(Vec2D, string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].([]string))
	case func([]Vec2D, string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].([]string))
	case func(bool, []string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].([]string))
	case func(int, []string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].([]string))
	case func(float64, []string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].([]string))
	case func(string, []string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].([]string))
	case func([]string, []string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].([]string))
	case func(Vec2D, []string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].([]string))
	case func([]Vec2D, []string, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].([]string))
	case func(bool, Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func(int, Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func(float64, Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func(string, Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func([]string, Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func(Vec2D, Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func([]Vec2D, Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].([]string))
	case func(bool, []Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func(int, []Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func(float64, []Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func(string, []Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func([]string, []Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func(Vec2D, []Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func([]Vec2D, []Vec2D, []string) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].([]string))
	case func(bool, bool, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func(int, bool, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func(float64, bool, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func(string, bool, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func([]string, bool, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func(Vec2D, bool, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func([]Vec2D, bool, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].(Vec2D))
	case func(bool, int, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func(int, int, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func(float64, int, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func(string, int, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func([]string, int, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func(Vec2D, int, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func([]Vec2D, int, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].(Vec2D))
	case func(bool, float64, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func(int, float64, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func(float64, float64, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func(string, float64, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func([]string, float64, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func(Vec2D, float64, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func([]Vec2D, float64, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].(Vec2D))
	case func(bool, string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func(int, string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func(float64, string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func(string, string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func([]string, string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func(Vec2D, string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func([]Vec2D, string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].(Vec2D))
	case func(bool, []string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func(int, []string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func(float64, []string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func(string, []string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func([]string, []string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func(Vec2D, []string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func([]Vec2D, []string, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].(Vec2D))
	case func(bool, Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func(int, Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func(float64, Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func(string, Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func([]string, Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func(Vec2D, Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func([]Vec2D, Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].(Vec2D))
	case func(bool, []Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func(int, []Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func(float64, []Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func(string, []Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func([]string, []Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func(Vec2D, []Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func([]Vec2D, []Vec2D, Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].(Vec2D))
	case func(bool, bool, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func(int, bool, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func(float64, bool, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func(string, bool, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func([]string, bool, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func(Vec2D, bool, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func([]Vec2D, bool, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(bool), argsTyped[2].([]Vec2D))
	case func(bool, int, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func(int, int, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func(float64, int, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func(string, int, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func([]string, int, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func(Vec2D, int, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func([]Vec2D, int, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(int), argsTyped[2].([]Vec2D))
	case func(bool, float64, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func(int, float64, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func(float64, float64, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func(string, float64, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func([]string, float64, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func(Vec2D, float64, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func([]Vec2D, float64, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(float64), argsTyped[2].([]Vec2D))
	case func(bool, string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func(int, string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func(float64, string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func(string, string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func([]string, string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func(Vec2D, string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func([]Vec2D, string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(string), argsTyped[2].([]Vec2D))
	case func(bool, []string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func(int, []string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func(float64, []string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func(string, []string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func([]string, []string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func(Vec2D, []string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func([]Vec2D, []string, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]string), argsTyped[2].([]Vec2D))
	case func(bool, Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func(int, Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func(float64, Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func(string, Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func([]string, Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func(Vec2D, Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func([]Vec2D, Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].(Vec2D), argsTyped[2].([]Vec2D))
	case func(bool, []Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(bool), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	case func(int, []Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(int), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	case func(float64, []Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(float64), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	case func(string, []Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(string), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	case func([]string, []Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]string), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	case func(Vec2D, []Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].(Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	case func([]Vec2D, []Vec2D, []Vec2D) func(xs []*Entity) func(i, j int) int:
		result = fTyped(argsTyped[0].([]Vec2D), argsTyped[1].([]Vec2D), argsTyped[2].([]Vec2D))
	default:
		panic("No case in either engine or user-registered signatures for the given func. Use EFDSL.RegisterUserSortSignatureAsserter()")
	}

	return result
}